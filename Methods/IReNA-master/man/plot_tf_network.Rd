% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/network_visualization.R
\name{plot_tf_network}
\alias{plot_tf_network}
\title{Function to visualize transcription factors regulatory network}
\usage{
plot_tf_network(
  TFs_list,
  layout = "grid",
  group.cols = NULL,
  title.name = NULL,
  vertex.size = 13,
  vertex.size.add = 3,
  vertex.label.color = "black",
  edge.label.color = "black",
  legend = TRUE,
  vertex.label.cex = 0.8,
  vertex.label.family = "ArialMT",
  frame.color = "white",
  arrow.size = 0.2,
  arrow.width = 0.5,
  edge.width = 1.8,
  edge.curved = 0,
  edge.color = c("#FDD1B0", "#B3B3B3")
)
}
\arguments{
\item{TFs_list}{TFs_list generated by \code{\link{network_analysis}}}

\item{layout}{the layout to display the network, options: 'grid','sphere',
'circle','random'}

\item{group.cols}{colors for group in network}

\item{title.name}{the name of the title}

\item{vertex.size}{size of vertex whose edge numbers are last 25\%}

\item{vertex.size.add}{expansion size of vertex whose edge numbers are
last 25\%-75\% and top25\%}

\item{vertex.label.color}{ertex label color}

\item{edge.label.color}{edge label color}

\item{legend}{logic, indicating whether to show the legend}

\item{vertex.label.cex}{The label size of vertex}

\item{vertex.label.family}{vertex label family}

\item{frame.color}{frame.color}

\item{arrow.size}{arrow size}

\item{arrow.width}{arrow width}

\item{edge.width}{edge width}

\item{edge.curved}{edge curvature}

\item{edge.color}{edge color. You need to input two colors, first one indicate
'Positive' regulation, second one indicate 'Negative' regulation.}
}
\value{
figure
}
\description{
This function integrate R package igraph to visualize consequence
of regulatory network analysis
}
\examples{
#'
load(system.file("extdata", "test_clustering.rda", package = "IReNA"))
Kmeans_clustering <- add_ENSID(test_clustering, Spec1 = "Hs")
cor0.6 <- get_cor(Kmeans_clustering, Tranfac201803_Hs_MotifTFsF, 0.7, start_column=3)
TFs_list <- network_analysis(cor0.6,Kmeans_clustering)
plot_tf_network(TFs_list)
}
