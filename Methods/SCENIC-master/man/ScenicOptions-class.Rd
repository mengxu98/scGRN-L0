% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class_ScenicOptions.R
\docType{class}
\name{ScenicOptions-class}
\alias{ScenicOptions-class}
\alias{ScenicOptions}
\alias{loadInt}
\alias{show}
\alias{show,ScenicOptions-method}
\alias{getDatasetInfo}
\alias{getDatasetInfo,ScenicOptions-method}
\alias{getDatabases}
\alias{getDatabases,ScenicOptions-method}
\alias{getStatus}
\alias{getStatus,ScenicOptions-method}
\alias{getSettings}
\alias{getSettings,ScenicOptions-method}
\alias{getOutName}
\alias{getOutName,ScenicOptions-method}
\alias{getIntName}
\alias{getIntName,ScenicOptions-method}
\alias{loadFile}
\alias{loadFile,ScenicOptions-method}
\alias{loadInt,ScenicOptions-method}
\alias{initializeScenic}
\alias{dbVersion}
\alias{dbLoadingAttempt}
\alias{checkAnnots}
\title{Object to store SCENIC settings}
\usage{
\S4method{show}{ScenicOptions}(object)

getDatasetInfo(object, ...)

\S4method{getDatasetInfo}{ScenicOptions}(object, slotName = NULL)

getDatabases(object, ...)

\S4method{getDatabases}{ScenicOptions}(object)

getStatus(object, ...)

\S4method{getStatus}{ScenicOptions}(object, asID = FALSE)

getSettings(object, ...)

\S4method{getSettings}{ScenicOptions}(object, slotName = NULL)

getOutName(object, ...)

\S4method{getOutName}{ScenicOptions}(object, out_type = NULL)

getIntName(object, ...)

\S4method{getIntName}{ScenicOptions}(object, int_type = NULL)

loadFile(object, ...)

\S4method{loadFile}{ScenicOptions}(
  object,
  fileName,
  verbose = FALSE,
  ifNotExists = c("error", "null"),
  ...
)

loadInt(object, ...)

\S4method{loadInt}{ScenicOptions}(object, int_type = NULL, ...)

initializeScenic(
  org = NULL,
  dbDir = "databases",
  dbs = NULL,
  datasetTitle = "",
  nCores = 4,
  dbIndexCol = "features"
)

dbVersion(dbs)

dbLoadingAttempt(dbFilePath, indexCol = "features")

checkAnnots(object, motifAnnot)
}
\value{
\itemize{
\item \code{initializeScenic()}: Creates the object. It also creates the folders where the results will be saved: 'int' and 'output'.
\item \code{show()}: Prints a summary of the object
\item \code{loadInt()}: Loads the selected "intermediate" file (normally from folder 'int/'). \code{getIntName(scenicOptions)} lists all possibilities (rownames: object name, fileName: file that will be loaded).
\item \code{getDatasetInfo()}, \code{getOutName()}: Shows the content of the corresponding slots.
}
}
\description{
This class contains the options/settings for a run of SCENIC. 
Most SCENIC functions use this object as input instead of traditional arguments that need to be set individually. 

The object has three main slots:
\itemize{
   \item \code{@inputDatasetInfo}: Contains the information about the dataset to analyze: 
   dataset name ("datasetTitle", only for user information), 
   organism ("org", determines the motif databases to use), and 
   the files containing cell phenotype information ("cellInfo", "colVars", for plots. optional). 
   
   An overview of this slot can be obtained with \code{getDatasetInfo(scenicOptions)}.
   \item \code{@fileNames}: Contains the file names where the results are saved (\code{$output}: most relevant results, \code{$int}: intermediate files).
   
   Output file names can be obtained with \code{getOutName(scenicOptions)}. To load an intermediate file: \code{getIntName(scenicOptions)} and \code{regulons <- loadInt(scenicOptions, "aucell_regulons")}.
   \item \code{@settings}: Arguments for specific functions/steps:
   
   - General arguments ("verbose", "nCores"), and "seed" for AUCell rankings and t-SNEs.
   
   - \code{runSCENIC_1_coexNetwork2modules()}: "modules/weightThreshold" for the co-expression modules. 
   
   - \code{runSCENIC_2_createRegulons()}: RcisTarget databases ("dbs", "db" , "dbDir"). These are used in \code{runSCENIC_2_createRegulons()}, but the input expression matrix and GENIE3/GRNBoost regulators should be consistent.
   
   - \code{runSCENIC_3_scoreCells()}: "aucell/smallestPopPercent" for AUCell automatic thresholds.
   
   - t-SNEs: "defaultTsne/perpl", "defaultTsne/dims", "defaultTsne/aucType", "tSNE_filePrefix" (and "seed").
   
   The overview of this slot can be obtained with \code{getSettings(scenicOptions)}.
}

In the current version there are not specific functions for setting a value. 
Follow the guidelines in the specific function if you need to modify a specific parameter.
}
\examples{
# Create object:
data(defaultDbNames)
scenicOptions <- initializeScenic(org="hgnc", datasetTitle="My dataset", 
dbDir="databases", dbs=defaultDbNames[["hgnc"]], nCores=4)

### Accessor functions
# Get output file names:
getOutName(scenicOptions)  # Shows all
getOutName(scenicOptions, "s2_motifEnrichmentHtml") 

# Load intermediate files: 
getIntName(scenicOptions) # Shows all (use the rowname to subset)
regulons <- loadInt(scenicOptions, "aucell_regulons") # load the file

# other:
getDatasetInfo(scenicOptions)
getDatasetInfo(scenicOptions, "datasetTitle")
scenicOptions@inputDatasetInfo$datasetTitle <- "new title" # to assign new value
getSettings(scenicOptions, "defaultTsne/dims")  

tsneFileName(scenicOptions)
getDatabases(scenicOptions) 
dbVersion(getDatabases(scenicOptions))
}
